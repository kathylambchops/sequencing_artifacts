# Current working directory is location of this Snakefile
# /home/klam/seq_artifacts/workflow
# Every path in here should be realtive to this working directory
# Snakefile â€“ rules imported for each sample, runs instances of rule at the same time so its run in parallel

#############
# Load config
#############
configfile: '/home/klam/seq_artifacts/config/config.yaml'

##############################
# Define files and directories
##############################
PROJ_DIR = config['proj_dir'] #/home/klam/seq_artifacts
WORKFLOW_DIR = f'{PROJ_DIR}/workflow'
RESOURCES_DIR = f'{PROJ_DIR}/resources'

ENVS_DIR = f'{WORKFLOW_DIR}/envs'
RULES_DIR = f'{WORKFLOW_DIR}/rules'

TMP_DIR = f'{PROJ_DIR}/{config["tmp_dir"]}'
DATA_DIR = f'{RESOURCES_DIR}/{config["data_dir"]}'
GENOME_DIR = f'{RESOURCES_DIR}/{config["genome_dir"]}'
GIAB_DIR = f'{RESOURCES_DIR}/{config["giab_dir"]}'
SRA_DIR = f'{RESOURCES_DIR}/{config["sra_dir"]}'
BEDFILES_DIR = f'{RESOURCES_DIR}/{config["bedfiles_dir"]}'
OUTPUTS_DIR = f'{PROJ_DIR}/{config["outputs_dir"]}'

FASTQC_DIR = f'{OUTPUTS_DIR}/fastqc'
MULTIQC_DIR = f'{OUTPUTS_DIR}/multiqc'
TRIMMOMATIC_DIR = f'{OUTPUTS_DIR}/trimmomatic'
BWA_DIR = f'{OUTPUTS_DIR}/bwa'
PICARD_DIR = f'{OUTPUTS_DIR}/picard'
PICARD_METRICS_DIR = f'{OUTPUTS_DIR}/picard_metrics'
VARDICT_DIR = f'{OUTPUTS_DIR}/vardict'
BEDTOOLS_DIR = f'{OUTPUTS_DIR}/bedtools'  
LOGS_DIR = f'{OUTPUTS_DIR}/logs'

GENOME_FILE = f'{GENOME_DIR}/{config["genome_file"]}'
ADAPTERS_FILE = f'{RESOURCES_DIR}/{config["adapters_file"]}'
GIAB_BED_FILE = f'{GIAB_DIR}/{config["giab_bed_file"]}'
GIAB_HC_VARIANTS_FILE = f'{GIAB_DIR}/{config["giab_hc_variants_file"]}'
SRA_LIST_TXT = f'{PROJ_DIR}/{config["sra_list_txt"]}'
MULTIQC_CONFIG_FILE = f'{PROJ_DIR}/{config["multiqc_config_file"]}'

SORT_ORDER = config['sort_order']
ALLELE_FREQ = config['allele_freq']

######################
# Define file patterns
######################
SAMPLE_SRA_FILE = f'{SRA_DIR}/{{sample}}/{{sample}}.sra'

SAMPLE_F_FILE = f'{DATA_DIR}/{{sample}}_1.fastq.gz'
SAMPLE_R_FILE = f'{DATA_DIR}/{{sample}}_2.fastq.gz'

TRIMMED_F_PAIRED_FILE = f'{TRIMMOMATIC_DIR}/{{sample}}_1_paired.fastq.gz'
TRIMMED_F_UNPAIRED_FILE = f'{TRIMMOMATIC_DIR}/{{sample}}_1_unpaired.fastq.gz'
TRIMMED_R_PAIRED_FILE = f'{TRIMMOMATIC_DIR}/{{sample}}_2_paired.fastq.gz'
TRIMMED_R_UNPAIRED_FILE = f'{TRIMMOMATIC_DIR}/{{sample}}_2_unpaired.fastq.gz'

FASTQC_F_FILE = f'{FASTQC_DIR}/{{sample}}_1_fastqc.zip'
FASTQC_R_FILE = f'{FASTQC_DIR}/{{sample}}_2_fastqc.zip'

TRIMMED_FASTQC_F_FILE = f'{FASTQC_DIR}/{{sample}}_1_paired_fastqc.zip'
TRIMMED_FASTQC_R_FILE = f'{FASTQC_DIR}/{{sample}}_2_paired_fastqc.zip'

MAPPED_BAM_FILE = f'{BWA_DIR}/{{sample}}_aligned.bam'
QUERY_SORTED_BAM_FILE = f'{PICARD_DIR}/{{sample}}_aligned_query_sorted.bam'
COORD_SORTED_BAM_FILE = f'{PICARD_DIR}/{{sample}}_aligned_coord_sorted.bam'

DEDUPED_BAM_FILE = f'{PICARD_DIR}/{{sample}}_aligned_deduped.bam'
DEDUPED_LOG_FILE = f'{PICARD_DIR}/{{sample}}_aligned_deduped.log'

VARDICT_FILE = f'{VARDICT_DIR}/{{sample}}_variants.vcf'
GIAB_INTERSECT_FILE = f'{BEDTOOLS_DIR}/{{sample}}_GIAB_variants_exome_intersection.vcf'
SRA_INTERSECT_FILE = f'{BEDTOOLS_DIR}/{{sample}}_SRA_variants_exome_intersection.vcf'

MULTIQC_NAME = 'multiqc_report'
MULTIQC_FILE = f'{MULTIQC_DIR}/{MULTIQC_NAME}.html'

##################################################################
# Create dictionary for coresponding bedfiles, platform, sequencer 
##################################################################
# key is SRA number, value is tuple containing exome bed file, platform, and sequencer
sample_dict = {}
sra_ = config["samples"] # looks like: {'sra1': {'sample': 'ERR1831349', 'exome_bedfile': 'agilentSureSelectv5.sorted.bed',...}}
for sra in sra_:
    sample = sra_[sra]["sample"]
    exome_bed = sra_[sra]["exome_bedfile"]
    platform = sra_[sra]["platform"]
    sequencer = sra_[sra]["sequencer"]
    sample_dict[sample] = (exome_bed, platform, sequencer)

# sample_dict looks like: {'ERR1831349': ('agilentSureSelectv5.sorted.bed', 'BGISEQ', 'BGISEQ-500')}

#########################################
# Function to get bedfile from dictionary
#########################################
def get_bed(wc):
    # Takes SRA number as input argument, returns bedfile
    bedfile = sample_dict[str(wc)][0]
    return(f'{BEDFILES_DIR}/{bedfile}')



###################
# Define file lists
###################
#SAMPLES = glob_wildcards(SAMPLE_F_FILE).sample

# SAMPLES is a list of SRA accession numbers as strings
with open(SRA_LIST_TXT) as f:
    SAMPLES = f.read().split('\n')


ALL_SAMPLE_SRA_FILES = expand(SAMPLE_SRA_FILE, sample=SAMPLES)
ALL_SAMPLE_FR_FILES = expand(SAMPLE_F_FILE, sample=SAMPLES) + expand(SAMPLE_R_FILE, sample=SAMPLES)

ALL_FASTQC_FILES = expand(FASTQC_F_FILE, sample=SAMPLES) + expand(FASTQC_R_FILE, sample=SAMPLES)
ALL_TRIMMED_FASTQC_FILES = expand(TRIMMED_FASTQC_F_FILE, sample=SAMPLES) + expand(TRIMMED_FASTQC_R_FILE, sample=SAMPLES)


ALL_SORTED_BAM_FILES = expand(QUERY_SORTED_BAM_FILE, sample=SAMPLES) + expand(COORD_SORTED_BAM_FILE, sample=SAMPLES)

ALL_DEDUPED_BAM_FILES = expand(DEDUPED_BAM_FILE, sample=SAMPLES)
ALL_DEDUPED_LOG_FILES = expand(DEDUPED_LOG_FILE, sample=SAMPLES)


ALL_VARDICT_FILES = expand(VARDICT_FILE, sample=SAMPLES)
ALL_GIAB_INTERSECT_FILES = expand(GIAB_INTERSECT_FILE, sample=SAMPLES)
ALL_SRA_INTERSECT_FILES = expand(SRA_INTERSECT_FILE, sample=SAMPLES)


####################
# CASE 3
#####################
#CASE3_REGIONS_BED = f'{OUTPUTS_DIR}/case3/{{sample}}_case3_regions.bed'
#CASE3_COVERAGE_BED = f'{OUTPUTS_DIR}/case3/{{sample}}_case3_coverage.bed'
#ALL_COVERAGE_FILES = expand(CASE3_COVERAGE_BED, sample=SAMPLES)

#RG_COORD_SORTED_BAM_FILE = f'{OUTPUTS_DIR}/case3/{{sample}}_RG_aligned_coord_sorted.bam'
#ALL_RG_BAM_FILES = expand(RG_COORD_SORTED_BAM_FILE, sample=SAMPLES)

# Function to get platform from dictionary
#def get_platform(wc):
#    # Takes SRA number as input argument, returns platform
#    platform = sample_dict[str(wc)][1]
#    return platform



#GATK_FILE = f'{OUTPUTS_DIR}/case3/{{sample}}_GATK.g.vcf'
#ALL_GATK_FILES = expand(GATK_FILE, sample=SAMPLES)


#include: f'{RULES_DIR}/case3.smk'


##############
# Define rules
##############
include: f'{RULES_DIR}/sratoolkit.smk'
include: f'{RULES_DIR}/fastqc.smk'
include: f'{RULES_DIR}/trimmomatic.smk'
include: f'{RULES_DIR}/bwa.smk'
include: f'{RULES_DIR}/picard.smk'
include: f'{RULES_DIR}/vardict.smk'
include: f'{RULES_DIR}/bedtools.smk'
include: f'{RULES_DIR}/multiqc.smk'


rule all:
    input:
        ALL_SAMPLE_SRA_FILES,
        ALL_SAMPLE_FR_FILES,
        MULTIQC_FILE,
        ALL_SORTED_BAM_FILES,
        ALL_DEDUPED_BAM_FILES,
        ALL_DEDUPED_LOG_FILES,
        ALL_VARDICT_FILES,
        ALL_GIAB_INTERSECT_FILES,
        ALL_SRA_INTERSECT_FILES,
        ALL_COVERAGE_FILES
        #ALL_RG_BAM_FILES,
        #ALL_GATK_FILES

#rule clean:
#    shell:
#        f'rm -rf {FASTQC_DIR}/* {MULTIQC_DIR}/* {TRIMMOMATIC_DIR}/* {BWA_DIR}/* {PICARD_DIR}/* {LOGS_DIR}/*'
